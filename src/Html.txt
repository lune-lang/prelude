none :: any m. html m
text :: any m. string -> html m

style :: any m. list (attribute m) -> html m -> html m
paragraph :: any m. list (attribute m) -> list (html m) -> html m
row :: any m. list (attribute m) -> list (html m) -> html m
wrappedRow :: any m. list (attribute m) -> list (html m) -> html m
column :: any m. list (attribute m) -> list (html m) -> html m

pixels :: int -> size
shrink :: size
fill :: size
portion :: int -> size

minimum :: int -> size -> size
maximum :: int -> size -> size

width :: any m. size -> attribute m
height :: any m. size -> attribute m

padding :: any m. int -> attribute m
paddingXY :: any m. int -> int -> attribute m
paddingEach
  :: any m
   . { Top := int
     ; Bottom := int
     ; Left := int
     ; Right := int
     ; nil
     }
  -> attribute m

spacing :: any m. int -> attribute m

centerX :: any m. attribute m
centerY :: any m. attribute m
onLeft, onRight :: any m. attribute m
onTop, onBottom :: any m. attribute m

link
  :: any m
   . list (attribute m)
  -> { Url := string
     ; Label := html m
     ; nil
     }
  -> html m

newTabLink
  :: any m
   . list (attribute m)
  -> { Url := string
     ; Label := html m
     ; nil
     }
  -> html m

downloadLink
  :: any m
   . list (attribute m)
  -> { Url := string
     ; Label := html m
     ; nil
     }
  -> html m

image
  :: any m
   . list (attribute m)
  -> { Url := string
     ; Description := string
     ; nil
     }
  -> html m

rgb :: float -> float -> float -> color
rgba :: float -> float -> float -> float -> color

--------------
--BACKGROUND--
--------------

color :: any m. color -> attribute m

gradient
  :: any m
   . { Angle := angle
     ; Colors := list color
     ; nil
     }
  -> attribute m

image
  :: any m
   . { Url := string
     ; Mode :=
         [ Fill := void
         ; Fit := void
         ; Tile := void
         ; nil
         ]
     ; nil
     }
  -> attribute m

----------
--BORDER--
----------

color :: any m. color -> attribute m
width :: any m. int -> attribute m
solid, dashed, dotted :: any m. attribute m

rounded :: any m. int -> attribute m
roundedEach
  :: any m
   . { TopLeft := int
     , TopRight := int
     , BottomLeft := int
     , BottomRight := int
     ; nil
     }
  -> attribute m

--------
--FONT--
--------

color :: any m. color -> attribute m
size :: any m. int -> attribute m
family :: any m. list font -> attribute m

typeface :: string -> font
serif, sansSerif, monospace :: font

left, right, center, justify :: any m. atribute m

---------
--EVENT--
---------

onClick :: any m. m -> attribute m
onDoubleClick :: any m. m -> attribute m

onMouseDown, onMouseUp :: any m. m -> attribute m
onMouseEnter, onMouseLeave :: any m. m -> attribute m
onMouseMove :: any m. m -> attribute m

onFocus :: any m. m -> attribute m
onLoseFocus :: any m. m -> attribute m

---------
--INPUT--
---------

button
  :: any m
   . list (attribute m)
  -> { OnClick := m
     ; Label := html m
     ; nil
     }
  -> html m

checkbox
  :: any m
   . list (attribute m)
  -> { OnChange := bool -> m
     ; Checked := bool
     ; Label := html m
     ; nil
     }
  -> html m

text
  :: any m
   . list (attribute m)
  -> { OnChange := maybe (string -> m)
     ; OnEnter := maybe (string -> m)
     ; Multiline := bool
     ; Text := string
     ; Placeholder := string
     ; nil
     }
  -> html m


password
  :: any m
   . list (attribute m)
  -> { OnChange := maybe (string -> m)
     ; OnEnter := maybe (string -> m)
     ; Show := bool
     ; Placeholder := string
     ; nil
     }
  -> html m

radio
  :: any m a.
   . list (attribute m)
  -> { OnChange := a -> msg
     ; Options := list
         { Value := a
         ; Label := html m
         ; nil
         }
     ; Selected := maybe a
     ; Label := html m
     ; nil
     }
  -> html m

slider
  :: any m
   . list (attribute m)
  -> { OnChange := float -> msg
     ; Min := float
     ; Max := float
     ; Step := float
     ; Value := float
     ; Label := html m
     }
  -> html m
