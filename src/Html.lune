export
  type html, type attribute,
  style, attribute, property,
  set, append, prepend,
  text, element,
  query, queryAll,
  modify, modifyAll,
  remove, removeAll

import Prelude open
import String exposing type string
import List exposing type list
import IO exposing type io

type html :: Type

type attribute =
  { Mode := [ Style | Attribute | Property | nil ]
  ; Name := string
  ; Value := string
  ; nil
  }

val style :: string -> string -> attribute
let style name value =
  ( Mode := only Style
  ; Name := name
  ; Value := value
  ; void
  )

val attribute :: string -> string -> attribute
let attribute name value =
  ( Mode := only Attribute
  ; Name := name
  ; Value := value
  ; void
  )

val property :: string -> string -> attribute
let property name value =
  ( Mode := only Property
  ; Name := name
  ; Value := value
  ; void
  )

foreign setStyle, setAttribute, setProperty :: string -> string -> html -> html

val set :: attribute -> html -> html
let set attr = def
  let f = Mode ? attr
    # match Style {setStyle}
    $ match Attribute {setAttribute}
    {setProperty}
  in
  f (Name ? attr) (Value ? attr)

foreign append :: html -> html -> html

foreign prepend :: html -> html -> html

foreign simpleElement :: string -> html

foreign text :: string -> html

val element :: string -> list attribute -> list html -> html
let element tag attrs children = def
  let withAttrs = List.foldLeft set (simpleElement tag) attrs
  in List.foldLeft append withAttrs children

foreign query :: string -> io html

foreign queryAll :: string -> io (list html)

foreign modify :: string -> (html -> html) -> io void

foreign modifyAll :: string -> (html -> html) -> io void

foreign remove :: string -> io void

foreign removeAll :: string -> io void

val appendBody :: html -> io void
let appendBody element = modify "body" (append element)
